Option Explicit

' Constants for File and Folder
Private Const PDF_TEMPLATE As String = "PT01_PAPER_DRAF.pdf"
Private Const GENPDF_FOLDER As String = "GENPDF"
Private Const LOG_FILE_NAME As String = "PDF_Generation_Log.txt"

' Constants for Memory Management
Private Const CHUNK_SIZE As Long = 100
Private Const MEMORY_THRESHOLD As Long = 300  ' MB
Private Const GC_INTERVAL As Long = 50

' Process Status
Private Type ProcessStatus
    TotalRecords As Long
    ProcessedRecords As Long
    SuccessCount As Long
    FailureCount As Long
    LastMemoryCheck As Date
    PrevSUPOFFCOD As String
    PrevOFFCOD As String
    SUPOFFNUMBER As Long
    OFFNUMBER As Long
    CurrentChunk As Long
End Type

' Main Process
Sub FillPDFWithMultipleSheet_PT01()
    ' Initialize variables
    Dim status As ProcessStatus
    Dim AcroApp As Object, objStream As Object
    Dim ws1 As Worksheet, ws2 As Worksheet
    Dim lastRow1 As Long, lastRow2 As Long
    Dim suPDFCountDict As Object
    
    ' Initialize counters
    Set suPDFCountDict = CreateObject("Scripting.Dictionary")
    status.LastMemoryCheck = Now
    
    ' Setup logging
    Set objStream = CreateObject("ADODB.Stream")
    With objStream
        .Type = 2 ' Text
        .Charset = "utf-8"
        .Open
    End With
    
    ' Initialize system
    If Not InitializeSystem(AcroApp, ws1, ws2, lastRow1, lastRow2, status, objStream) Then
        GoTo CleanUp
    End If
    
    ' Process records in chunks
    Dim i As Long
    For i = 2 To lastRow1 Step CHUNK_SIZE
        On Error GoTo ErrorHandler
        
        ' Check memory status
        If NeedsMemoryCleanup(status) Then
            WriteLog objStream, "Performing memory cleanup..."
            ForceGarbageCollection
            status.LastMemoryCheck = Now
        End If
        
        ' Process chunk
        Dim endRow As Long
        endRow = Application.Min(i + CHUNK_SIZE - 1, lastRow1)
        
        If Not ProcessChunk(ws1, ws2, i, endRow, AcroApp, status, objStream, suPDFCountDict) Then
            WriteLog objStream, "Error processing chunk: " & status.CurrentChunk
            GoTo CleanUp
        End If
        
        ' Update UI
        UpdateProgressBar status, lastRow1
    Next i
    
    ' Write summary
    WriteSummary objStream, status, suPDFCountDict
    
CleanUp:
    ' Cleanup
    CleanupSystem AcroApp, objStream
    RestoreExcelSettings
    
    MsgBox "Process completed. Check log for details.", vbInformation
    Exit Sub
    
ErrorHandler:
    WriteLog objStream, "Critical Error: " & Err.Description
    Resume CleanUp
End Sub

' Initialize System
Private Function InitializeSystem(ByRef AcroApp As Object, ByRef ws1 As Worksheet, _
                                ByRef ws2 As Worksheet, ByRef lastRow1 As Long, _
                                ByRef lastRow2 As Long, ByRef status As ProcessStatus, _
                                ByRef objStream As Object) As Boolean
    ' Check memory
    If GetCurrentMemoryUsage() > MEMORY_THRESHOLD Then
        WriteLog objStream, "Insufficient memory to start process"
        InitializeSystem = False
        Exit Function
    End If
    
    ' Initialize Adobe
    Set AcroApp = CreateObject("AcroExch.App")
    If AcroApp Is Nothing Then
        WriteLog objStream, "Failed to initialize Adobe Acrobat"
        InitializeSystem = False
        Exit Function
    End If
    
    ' Initialize worksheets
    Set ws1 = ThisWorkbook.Sheets("NID_DETAIL")
    Set ws2 = ThisWorkbook.Sheets("BRANO_DETAIL")
    
    lastRow1 = ws1.Cells(ws1.Rows.Count, "A").End(xlUp).Row
    lastRow2 = ws2.Cells(ws2.Rows.Count, "A").End(xlUp).Row
    
    ' Optimize Excel
    OptimizeExcelSettings
    
    InitializeSystem = True
End Function

' Process Single Chunk
Private Function ProcessChunk(ByRef ws1 As Worksheet, ByRef ws2 As Worksheet, _
                            ByVal startRow As Long, ByVal endRow As Long, _
                            ByRef AcroApp As Object, ByRef status As ProcessStatus, _
                            ByRef objStream As Object, ByRef suPDFCountDict As Object) As Boolean
    On Error GoTo ChunkError
    
    Dim i As Long
    For i = startRow To endRow
        ' Process single record
        If ProcessSingleRecord(ws1, ws2, i, AcroApp, status, objStream, suPDFCountDict) Then
            status.SuccessCount = status.SuccessCount + 1
        Else
            status.FailureCount = status.FailureCount + 1
        End If
        
        status.ProcessedRecords = status.ProcessedRecords + 1
        
        ' Periodic cleanup
        If status.ProcessedRecords Mod GC_INTERVAL = 0 Then
            ForceGarbageCollection
        End If
    Next i
    
    ProcessChunk = True
    Exit Function
    
ChunkError:
    WriteLog objStream, "Error in chunk: " & Err.Description
    ProcessChunk = False
End Function

' Process Single Record
Private Function ProcessSingleRecord(ByRef ws1 As Worksheet, ByRef ws2 As Worksheet, _
                                   ByVal currentRow As Long, ByRef AcroApp As Object, _
                                   ByRef status As ProcessStatus, ByRef objStream As Object, _
                                   ByRef suPDFCountDict As Object) As Boolean
    ' Create PDF objects
    Dim AcroAVDoc As Object, AcroPDDoc As Object, AcroForm As Object
    
    ' Open PDF
    Set AcroAVDoc = CreateObject("AcroExch.AVDoc")
    If Not OpenPDFDocument(AcroAVDoc, AcroPDDoc, AcroForm, PDF_TEMPLATE) Then
        WriteLog objStream, "Failed to open PDF template for row: " & currentRow
        GoTo RecordCleanup
    End If
    
    ' Get data and fill PDF
    If Not FillPDFData(ws1, ws2, currentRow, AcroForm, status, suPDFCountDict) Then
        WriteLog objStream, "Failed to fill PDF data for row: " & currentRow
        GoTo RecordCleanup
    End If
    
    ' Save PDF
    Dim OutputPDF As String
    OutputPDF = GeneratePDFPath(ws1.Cells(currentRow, "N").Value, _
                               ws1.Cells(currentRow, "L").Value, _
                               ws1.Cells(currentRow, "A").Value)
    
    AcroPDDoc.Save 1, OutputPDF
    WriteLog objStream, "Successfully created PDF: " & OutputPDF
    
    ProcessSingleRecord = True
    
RecordCleanup:
    ' Cleanup
    If Not AcroForm Is Nothing Then Set AcroForm = Nothing
    If Not AcroPDDoc Is Nothing Then Set AcroPDDoc = Nothing
    If Not AcroAVDoc Is Nothing Then
        AcroAVDoc.Close False
        Set AcroAVDoc = Nothing
    End If
End Function

' Memory Management Functions
Private Function GetCurrentMemoryUsage() As Double
    Dim proc As Object
    Set proc = GetObject("winmgmts:\\.\root\cimv2"). _
               ExecQuery("Select * from Win32_Process Where ProcessID = " & Application.Hwnd)
               
    Dim p As Object
    For Each p In proc
        GetCurrentMemoryUsage = p.WorkingSetSize / 1024 / 1024
        Exit Function
    Next
    
    GetCurrentMemoryUsage = 0
End Function

Private Sub ForceGarbageCollection()
    Dim i As Long
    For i = 1 To 2
        DoEvents
        Application.MemoryFree
    Next i
End Function

Private Function NeedsMemoryCleanup(ByRef status As ProcessStatus) As Boolean
    NeedsMemoryCleanup = (GetCurrentMemoryUsage() > MEMORY_THRESHOLD) Or _
                         (DateDiff("s", status.LastMemoryCheck, Now) > 300)
End Function

' Helper Functions
Private Sub WriteLog(ByRef objStream As Object, ByVal message As String)
    objStream.WriteText Format(Now, "yyyy-mm-dd hh:mm:ss") & " - " & message & vbCrLf
    Debug.Print message
End Sub

Private Sub UpdateProgressBar(ByRef status As ProcessStatus, ByVal totalRows As Long)
    Dim percent As Double
    percent = (status.ProcessedRecords / (totalRows - 1)) * 100
    
    Application.StatusBar = "Progress: " & Format(percent, "0.0") & "% | " & _
                          "Success: " & status.SuccessCount & " | " & _
                          "Failed: " & status.FailureCount & " | " & _
                          "Memory: " & Format(GetCurrentMemoryUsage, "#,##0.00") & " MB"
    DoEvents
End Sub

Private Sub OptimizeExcelSettings()
    With Application
        .ScreenUpdating = False
        .EnableEvents = False
        .Calculation = xlCalculationManual
        .DisplayAlerts = False
    End With
End Sub

Private Sub RestoreExcelSettings()
    With Application
        .ScreenUpdating = True
        .EnableEvents = True
        .Calculation = xlCalculationAutomatic
        .DisplayAlerts = True
        .StatusBar = False
    End With
End Sub

Private Sub CleanupSystem(ByRef AcroApp As Object, ByRef objStream As Object)
    If Not AcroApp Is Nothing Then
        AcroApp.Exit
        Set AcroApp = Nothing
    End If
    
    If Not objStream Is Nothing Then
        objStream.Close
        Set objStream = Nothing
    End If
End Sub

Private Sub WriteSummary(ByRef objStream As Object, ByRef status As ProcessStatus, _
                        ByRef suPDFCountDict As Object)
    WriteLog objStream, String(50, "-")
    WriteLog objStream, "Process Summary"
    WriteLog objStream, "Total Processed: " & status.ProcessedRecords
    WriteLog objStream, "Successful: " & status.SuccessCount
    WriteLog objStream, "Failed: " & status.FailureCount
    WriteLog objStream, String(50, "-")
    
    Dim key As Variant
    For Each key In suPDFCountDict.Keys
        WriteLog objStream, "SUPOFFCOD " & key & ": " & suPDFCountDict(key)
    Next key
End Sub