Sub ImportDataFromPP01()

    ' Declare variables
    Dim ws1 As Worksheet, wsCurrent As Worksheet
    Dim wbSource As Workbook
    Dim lastRow1 As Long
    Dim i As Long
    Dim sourcePath As String
    Dim sourceFileName As String
    
    ' Define current workbook and worksheet
    Set wsCurrent = ThisWorkbook.Sheets("NID_DETAIL")
    
    ' Define the path and source file name
    sourcePath = ThisWorkbook.Path & "\"
    sourceFileName = "DATAPP01_PP011.xlsx"
    
    ' Log the source path and file name
    Debug.Print "Source Path: " & sourcePath
    Debug.Print "Source File Name: " & sourceFileName
    
    ' Open the source workbook (ALLDATAPP01.xlsm)
    Set wbSource = Workbooks.Open(sourcePath & sourceFileName)
    Set ws1 = wbSource.Sheets("PP01+PP011 PAPER")
    
    ' Log when the source workbook is opened
    Debug.Print "Opened workbook: " & wbSource.Name
    Debug.Print "Working on sheet: " & ws1.Name
    
    ' Find the last row with data in the source sheet
    lastRow1 = ws1.Cells(ws1.Rows.count, "A").End(xlUp).Row
    Debug.Print "Last row in source sheet: " & lastRow1
    
    ' Loop through each row in the source sheet starting from row 2
    For i = 2 To lastRow1
        ' Log the current row being processed
        Debug.Print "Processing row: " & i
        
        ' Set format to text and import data from source sheet
        wsCurrent.Cells(i, "A").NumberFormat = "@"  ' Set format to Text
        wsCurrent.Cells(i, "A").Value = "'" & ws1.Cells(i, "A").Value  ' NID with leading '
        
        wsCurrent.Cells(i, "C").Value = ws1.Cells(i, "C").Value  ' TITNAM
        wsCurrent.Cells(i, "D").Value = ws1.Cells(i, "D").Value  ' FIRNAM
        wsCurrent.Cells(i, "E").Value = ws1.Cells(i, "E").Value  ' MIDNAM
        wsCurrent.Cells(i, "F").Value = ws1.Cells(i, "F").Value  ' LASNAM
        wsCurrent.Cells(i, "H").Value = ws1.Cells(i, "H").Value  ' ENGNAM
        wsCurrent.Cells(i, "I").Value = ws1.Cells(i, "G").Value  ' IMPIDAT
        wsCurrent.Cells(i, "J").Value = ws1.Cells(i, "I").Value  ' OFFCOD
        wsCurrent.Cells(i, "AL").Value = ws1.Cells(i, "J").Value  ' OFFNAM
        wsCurrent.Cells(i, "K").Value = ws1.Cells(i, "K").Value  ' SUPOFFCOD
        wsCurrent.Cells(i, "L").Value = ws1.Cells(i, "L").Value  ' SUPOFFNAM
        wsCurrent.Cells(i, "M").Value = ws1.Cells(i, "M").Value  ' IMPORG
        wsCurrent.Cells(i, "P").Value = ws1.Cells(i, "N").Value  ' BLDGNAM
        wsCurrent.Cells(i, "Q").Value = ws1.Cells(i, "O").Value  ' ROOMNO
        wsCurrent.Cells(i, "R").Value = ws1.Cells(i, "P").Value  ' FLOORNO
        wsCurrent.Cells(i, "S").Value = ws1.Cells(i, "Q").Value  ' VILLAGE
        wsCurrent.Cells(i, "T").Value = ws1.Cells(i, "R").Value  ' ADDNO
        wsCurrent.Cells(i, "U").Value = ws1.Cells(i, "S").Value  ' MOONO
        wsCurrent.Cells(i, "V").Value = ws1.Cells(i, "T").Value  ' SOINAM
        wsCurrent.Cells(i, "W").Value = ws1.Cells(i, "U").Value  ' YAEK
        wsCurrent.Cells(i, "X").Value = ws1.Cells(i, "V").Value  ' THNNAM
        wsCurrent.Cells(i, "Y").Value = ws1.Cells(i, "W").Value  ' TAMCOD
        wsCurrent.Cells(i, "Z").Value = ws1.Cells(i, "X").Value  ' TAMNAM
        wsCurrent.Cells(i, "AA").Value = ws1.Cells(i, "Y").Value ' AMPCOD
        wsCurrent.Cells(i, "AB").Value = ws1.Cells(i, "Z").Value ' AMPNAM
        wsCurrent.Cells(i, "AC").Value = ws1.Cells(i, "AA").Value ' PROVCOD
        wsCurrent.Cells(i, "AD").Value = ws1.Cells(i, "AB").Value ' PROVNAM
        wsCurrent.Cells(i, "AE").Value = ws1.Cells(i, "AC").Value ' PASCOD

        
        ' Log the NID and other key data being imported for this row
        Debug.Print "NID: " & ws1.Cells(i, "A").Value & " | TITNAM: " & ws1.Cells(i, "C").Value & _
                    " | FIRNAM: " & ws1.Cells(i, "D").Value & " | SUPOFFNAM: " & ws1.Cells(i, "L").Value
    Next i

    ' Close the source workbook without saving
    wbSource.Close False
    Debug.Print "Closed workbook: " & sourceFileName

    ' Inform the user that the process is complete
    MsgBox "Data imported successfully from ALLDATAPP01.xlsm", vbInformation

End Sub
Sub RANDOM_BRAN()
    Dim ws1 As Worksheet, ws2 As Worksheet, wsAddress As Worksheet
    Dim lastRow1 As Long, lastRow2 As Long, lastRowAddress As Long
    Dim i As Long, j As Long
    Dim NID As String, BRANAM As String, TITCOD As String
    Dim BRATITNAM As String ' New variable for TITNAM
    Dim BLDGNAM As String, ROOMNO As String, FLOORNO As String, VILLAGE As String
    Dim ADDNO As String, MOONO As String, SOINAM As String, YAEK As String
    Dim THNNAM As String, TAMCOD As String, PROVCOD As String
    Dim AMPCOD As String, POSCOD As String
    Dim TAMNAM As String, AMPNAM As String, PROVNAM As String, BUSLOTYP As String
    Dim NewBRANO As String
    Dim RandomRow As Long

    ' Set the worksheets to the respective sheet names
    Set ws1 = ThisWorkbook.Sheets("NID_DETAIL")
    Set ws2 = ThisWorkbook.Sheets("BRANO_DETAIL")
    Set wsAddress = ThisWorkbook.Sheets("DBADDRESS")

    ' Find the last row with data in NID_DETAIL and DBADDRESS
    lastRow1 = ws1.Cells(ws1.Rows.count, "A").End(xlUp).Row
    lastRowAddress = wsAddress.Cells(wsAddress.Rows.count, "A").End(xlUp).Row

    Debug.Print "Last row in NID_DETAIL: " & lastRow1
    Debug.Print "Last row in DBADDRESS: " & lastRowAddress

    ' Loop through each row in NID_DETAIL and generate random BRANO
    For i = 2 To lastRow1
        ' Get NID and BRANAM from current row
        NID = ws1.Cells(i, "A").Value
        BRATITNAM = ws1.Cells(i, "C").Value ' Get BRATITNAM from column C
        BRANAM = ws1.Cells(i, "D").Value ' Get BRANAM from column D

        Debug.Print "Processing NID: " & NID

        ' Generate 2 branches (BRANO)
        For j = 1 To 2
            ' Assign NewBRANO as 1 or 2
            NewBRANO = j
            Debug.Print "Creating branch: " & NewBRANO

            ' Get random row from DBADDRESS for address details
            RandomRow = Int((lastRowAddress - 2 + 1) * Rnd + 2)
            Debug.Print "Random row selected from DBADDRESS: " & RandomRow

            ' Fetch random address details from DBADDRESS
            BLDGNAM = wsAddress.Cells(RandomRow, "A").Value
            ROOMNO = wsAddress.Cells(RandomRow, "B").Value
            FLOORNO = wsAddress.Cells(RandomRow, "C").Value
            VILLAGE = wsAddress.Cells(RandomRow, "D").Value
            ADDNO = wsAddress.Cells(RandomRow, "E").Value
            MOONO = wsAddress.Cells(RandomRow, "F").Value
            SOINAM = wsAddress.Cells(RandomRow, "G").Value
            YAEK = wsAddress.Cells(RandomRow, "H").Value
            THNNAM = wsAddress.Cells(RandomRow, "I").Value
            TAMCOD = wsAddress.Cells(RandomRow, "J").Value
            AMPCOD = wsAddress.Cells(RandomRow, "K").Value
            PROVCOD = wsAddress.Cells(RandomRow, "L").Value
            POSCOD = wsAddress.Cells(RandomRow, "M").Value
            TAMNAM = wsAddress.Cells(RandomRow, "N").Value
            AMPNAM = wsAddress.Cells(RandomRow, "O").Value
            PROVNAM = wsAddress.Cells(RandomRow, "P").Value
            BUSLOTYP = wsAddress.Cells(RandomRow, "Q").Value

            Debug.Print "Address selected - BLDGNAM: " & BLDGNAM & ", ROOMNO: " & ROOMNO & ", TAMNAM: " & TAMNAM

            ' Insert the new random branch data into BRANO_DETAIL
            lastRow2 = ws2.Cells(ws2.Rows.count, "A").End(xlUp).Row + 1
            ws2.Cells(lastRow2, "A").Value = NID
            ws2.Cells(lastRow2, "B").Value = NewBRANO
            ws2.Cells(lastRow2, "C").Value = BRATITNAM ' Insert BRATITNAM into column C
            ws2.Cells(lastRow2, "D").Value = BRANAM & " BRANO " & NewBRANO ' Insert BRANAM into column D
            ws2.Cells(lastRow2, "E").Value = BLDGNAM
            ws2.Cells(lastRow2, "F").Value = ROOMNO
            ws2.Cells(lastRow2, "G").Value = FLOORNO
            ws2.Cells(lastRow2, "H").Value = VILLAGE
            ws2.Cells(lastRow2, "I").Value = ADDNO
            ws2.Cells(lastRow2, "J").Value = MOONO
            ws2.Cells(lastRow2, "K").Value = SOINAM
            ws2.Cells(lastRow2, "L").Value = YAEK
            ws2.Cells(lastRow2, "M").Value = THNNAM
            ws2.Cells(lastRow2, "N").Value = TAMCOD
            ws2.Cells(lastRow2, "P").Value = AMPCOD
            ws2.Cells(lastRow2, "R").Value = PROVCOD
            ws2.Cells(lastRow2, "T").Value = POSCOD
            ws2.Cells(lastRow2, "O").Value = TAMNAM
            ws2.Cells(lastRow2, "Q").Value = AMPNAM
            ws2.Cells(lastRow2, "S").Value = PROVNAM
            ws2.Cells(lastRow2, "X").Value = BUSLOTYP

            Debug.Print "Inserted new branch for NID: " & NID & " with BRANO: " & NewBRANO
        Next j
    Next i

    MsgBox "Branches created successfully for all NID in Sheet1!"
End Sub

Sub random_isic()

    Dim ws1 As Worksheet, ws2 As Worksheet, ws3 As Worksheet
    Dim lastRow1 As Long, lastRow2 As Long, lastRow3 As Long
    Dim i As Long, j As Long, RandomRow As Long
    Dim NID As String
    Dim GOOTYPCOD As String, GOOTYPTXT As String
    Dim GOOTYPLEV As String

    ' Set worksheets
    Set ws1 = ThisWorkbook.Sheets("NID_DETAIL")
    Set ws2 = ThisWorkbook.Sheets("ISIC_DETAIL")
    Set ws3 = ThisWorkbook.Sheets("TRDBGOO")

    ' Find the last row for each sheet
    lastRow1 = ws1.Cells(ws1.Rows.count, "A").End(xlUp).Row
    lastRow3 = ws3.Cells(ws3.Rows.count, "A").End(xlUp).Row
    Debug.Print "Last row in NID_DETAIL: " & lastRow1
    Debug.Print "Last row in TRDBGOO: " & lastRow3

    ' Loop through each NID in ws1
    For i = 2 To lastRow1
        ' Get values from ws1 for the current row
        NID = ws1.Cells(i, "A").Value
        Debug.Print "Processing NID: " & NID & " at row: " & i

        ' Perform 1 random selection from ws3
        For j = 1 To 1
            ' Generate a random row from ws3
            RandomRow = Int((lastRow3 - 2 + 1) * Rnd + 2)
            Debug.Print "Random row selected from TRDBGOO: " & RandomRow
            
            ' Get random values from ws3
            GOOTYPLEV = ws3.Cells(RandomRow, "A").Value
            GOOTYPCOD = ws3.Cells(RandomRow, "B").Value
            GOOTYPTXT = ws3.Cells(RandomRow, "C").Value
            Debug.Print "Random data from TRDBGOO -> GOOTYPLEV: " & GOOTYPLEV & _
                        ", GOOTYPCOD: " & GOOTYPCOD & ", GOOTYPTXT: " & GOOTYPTXT
            
            ' Find the next available row in ws2
            lastRow2 = ws2.Cells(ws2.Rows.count, "A").End(xlUp).Row + 1
            Debug.Print "Next available row in ISIC_DETAIL: " & lastRow2
            
            ' Write data into ws2
            ws2.Cells(lastRow2, "A").Value = NID
            ws2.Cells(lastRow2, "B").Value = GOOTYPLEV
            ws2.Cells(lastRow2, "V").Value = GOOTYPCOD
            ws2.Cells(lastRow2, "L").Value = GOOTYPTXT
            
            Debug.Print "Data written to ISIC_DETAIL at row: " & lastRow2
        Next j
    Next i

    MsgBox "Random data inserted successfully into ISIC_DETAIL!"
    Debug.Print "Random data insertion completed!"

End Sub
Sub GenerateRandomAddress() 'FOR DB ADDRESS
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim addressNo As String
    Dim firstPart As String
    Dim secondPart As String
    Dim MOONO As String ' Variable for MOONO

    ' Set the worksheet that you want to work with (change as needed)
    Set ws = ThisWorkbook.Sheets("DBADDRESS")

    ' Find the last row with data in column A
    lastRow = ws.Cells(ws.Rows.count, "A").End(xlUp).Row
    Debug.Print "Last row with data: " & lastRow

    ' Loop through each row in column A (starting from row 2 if there's a header)
    For i = 2 To lastRow
        ' Generate random numbers for address
        firstPart = Application.WorksheetFunction.RandBetween(100, 999)
        secondPart = Application.WorksheetFunction.RandBetween(100, 999)
        
        ' Generate random MOONO (between 1 and 9)
        MOONO = Application.WorksheetFunction.RandBetween(1, 9)
        
        ' Combine the random numbers into the address format
        addressNo = firstPart & "/" & secondPart

        ' Place the address in column E and MOONO in column F
        ws.Cells(i, "E").Value = addressNo
        ws.Cells(i, "F").Value = MOONO
        
        ' Debug log for each iteration
        Debug.Print "Row: " & i & ", FirstPart: " & firstPart & ", SecondPart: " & secondPart & _
                    ", Generated Address: " & addressNo & ", MOONO: " & MOONO
    Next i

    ' Notify that the operation is complete
    MsgBox "Random addresses and MOONO generated in columns E and F!", vbInformation
    Debug.Print "Random address and MOONO generation completed!"
End Sub
Sub CountMatchingValues()
    Dim wsNID As Worksheet
    Dim wsBRANO As Worksheet
    Dim lastRowNID As Long
    Dim lastRowBRANO As Long
    Dim NID As Variant
    Dim countBRANO As Long
    Dim i As Long, j As Long

    ' Set the worksheets
    Set wsNID = ThisWorkbook.Sheets("NID_DETAIL")
    Set wsBRANO = ThisWorkbook.Sheets("BRANO_DETAIL")
    
    ' Find the last row with data in each sheet
    lastRowNID = wsNID.Cells(wsNID.Rows.count, "A").End(xlUp).Row
    lastRowBRANO = wsBRANO.Cells(wsBRANO.Rows.count, "A").End(xlUp).Row
    
    ' Loop through each NID in the NID_DETAIL sheet
    For i = 2 To lastRowNID
        NID = wsNID.Cells(i, "A").Value
        countBRANO = 0
        
        ' Debug log for current NID being processed
        Debug.Print "Processing NID: " & NID
        
        ' Loop through each BRANO in the BRANO_DETAIL sheet
        For j = 2 To lastRowBRANO
            ' Check for matching NID and condition
            If wsBRANO.Cells(j, "A").Value = NID And wsBRANO.Cells(j, "B").Value > 0 Then
                countBRANO = countBRANO + 1
                ' Debug log for each match found
                Debug.Print "Match found for NID: " & NID & " in row: " & j & " of BRANO_DETAIL"
            End If
        Next j
        
        ' Write the count result back to the NID_DETAIL sheet
        wsNID.Cells(i, "AK").Value = countBRANO
        
        ' Debug log for count result
        Debug.Print "Total count for NID " & NID & ": " & countBRANO
    Next i
    
    ' Notify completion of the process
    MsgBox "Count matching values completed!", vbInformation
End Sub

    
Sub ClearCellsWithLongTextAndDeleteEmptyRows()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' Set the current worksheet
    Set ws = ThisWorkbook.Sheets("TRDBGOO") ' Change the sheet name as needed

    ' Find the last row in the sheet
    lastRow = ws.Cells(ws.Rows.count, "C").End(xlUp).Row ' Adjust "A" to the column you want to check

    ' Loop through each cell from the bottom up to avoid skipping rows when deleting
    For i = lastRow To 1 Step -1
        ' Clear cell if the text is longer than 30 characters
        If Len(ws.Cells(i, "C").Value) > 30 Then ' Adjust "A" to the column you want to check
            ws.Cells(i, "C").ClearContents
        End If

        ' Check if column C is empty, and delete the row if true
        If ws.Cells(i, "C").Value = "" Then
            ws.Rows(i).Delete
        End If
    Next i

    MsgBox "Cleared cells with long text and deleted empty rows in column C!"
End Sub


Sub CountAndLogValuesInColumnK()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim logFilePath As String
    Dim logFile As Integer
    Dim i As Long
    Dim valueInK As Variant
    Dim countDict As Object
    Dim timestamp As String

    ' Set the worksheet to be checked
    Set ws = ThisWorkbook.Sheets("NID_DETAIL") ' Change to the name of the desired sheet

    ' Find the last row with data in column K
    lastRow = ws.Cells(ws.Rows.count, "K").End(xlUp).Row

    ' Check if the log file already exists
    timestamp = Format(Now, "yyyy-mm-dd_hh-nn-ss")
    logFilePath = ThisWorkbook.Path & "\log_K_count_" & timestamp & ".txt"

    ' Prepare the log file for writing
    logFile = FreeFile
    Open logFilePath For Output As logFile

    ' Create a Dictionary to count occurrences of values in column K
    On Error Resume Next
    Set countDict = CreateObject("Scripting.Dictionary")
    If Err.NUMBER <> 0 Then
        MsgBox "Error creating Dictionary. Please ensure you have the 'Microsoft Scripting Runtime' reference enabled.", vbCritical
        Close logFile
        Exit Sub
    End If
    On Error GoTo 0

    ' Loop through each row in column K to read values
    For i = 1 To lastRow
        valueInK = ws.Cells(i, "K").Value
        
        ' Skip empty values
        If Trim(valueInK) <> "" Then
            ' If the value exists in the dictionary, increment the count
            If countDict.Exists(valueInK) Then
                countDict(valueInK) = countDict(valueInK) + 1
            Else
                ' If the value does not exist, add it to the dictionary
                countDict.Add valueInK, 1
            End If
            
            ' Debug log for the value found
            Debug.Print "Row " & i & ": Found value '" & valueInK & "' - Count: " & countDict(valueInK)
        End If
    Next i

    ' Loop through the dictionary to log the counts
    Dim key As Variant
    For Each key In countDict.Keys
        Dim count As Long
        count = countDict(key)

        ' Log the count with the appropriate symbol
        If count > 10 Then
            Print #logFile, "Value '" & key & "' appears " & count & " times > 10."
            Debug.Print "Logged: Value '" & key & "' appears " & count & " times > 10."
        ElseIf count < 10 Then
            Print #logFile, "Value '" & key & "' appears " & count & " times < 10."
            Debug.Print "Logged: Value '" & key & "' appears " & count & " times < 10."
        Else
            Print #logFile, "Value '" & key & "' appears " & count & " times = 10."
            Debug.Print "Logged: Value '" & key & "' appears " & count & " times = 10."
        End If
    Next key

    ' Close the log file
    Close logFile

    ' Show a message when the check is complete
    MsgBox "Check completed. Log has been saved at: " & logFilePath, vbInformation
    Debug.Print "Check completed. Log file saved at: " & logFilePath
End Sub

